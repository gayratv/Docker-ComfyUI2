# cd /mnt/f/_prg/python/Docker-ComfyUI/comfyui-union2/python-prg
# python3 sync_dir.py "clarity-upscale"
# python3 sync_dir.py "FluxKontext"

import os
import shutil
import argparse
from tqdm import tqdm  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è progress bar

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –ø—É—Ç–∏ –∫ –≤–∞—à–∏–º —Ä–µ–∞–ª—å–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º.
PERMANENT_DIR = "/mnt/d/ComfyUI-data"  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
TEMP_DIR = "/mnt/h/ComfyUI-data"  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
# –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∞—Ç –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
BASE_TEMPLATE_DIR = "/mnt/f/_prg/python/Docker-ComfyUI/comfyui-union2/aria2/templates/models"


def process_model_configs(config_path, permanent_root, temp_root, display_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
    –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é.
    """
    print(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {display_path} ---")

    # --- –≠–¢–ê–ü 1: –ß–¢–ï–ù–ò–ï –ò –û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–ê ---
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {config_path}")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª for –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    cleaned_lines = []
    for line in lines:
        stripped_line = line.strip()
        if stripped_line and not stripped_line.startswith('#'):
            cleaned_lines.append(stripped_line)

    print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –≤ —Ñ–∞–π–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å {len(cleaned_lines)} –∑–Ω–∞—á–∞—â–∏—Ö —Å—Ç—Ä–æ–∫.")

    # --- –≠–¢–ê–ü 2: –û–°–ù–û–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ë–õ–û–ö–ê–ú–ò ---
    if len(cleaned_lines) % 3 != 0:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∞—â–∏—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –∫—Ä–∞—Ç–Ω–æ 3. –í–æ–∑–º–æ–∂–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")

    copied_files_count = 0
    checked_files_count = 0

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–ª–æ–∫–∞–º–∏ –ø–æ 3
    for i in range(0, len(cleaned_lines) // 3 * 3, 3):
        url_line = cleaned_lines[i]
        line_A = cleaned_lines[i + 1]
        line_B = cleaned_lines[i + 2]

        dir_line = None
        out_line = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ 'dir', –∞ –∫–∞–∫–∞—è 'out'
        if line_A.startswith('dir=') and line_B.startswith('out='):
            dir_line = line_A
            out_line = line_B
        elif line_A.startswith('out=') and line_B.startswith('dir='):
            out_line = line_A
            dir_line = line_B
        else:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –±–ª–æ–∫–µ –¥–ª—è URL '{url_line}'. 'dir' –∏ 'out' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–æ–ø—É—Å–∫ –±–ª–æ–∫–∞.")
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            dir_val = dir_line.split('=', 1)[1].strip()
            out_val = out_line.split('=', 1)[1].strip()
        except IndexError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–ª—è URL '{url_line}'. –ü—Ä–æ–ø—É—Å–∫ –±–ª–æ–∫–∞.")
            continue

        checked_files_count += 1
        print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: dir='{dir_val}', out='{out_val}'")

        source_file_path = os.path.join(permanent_root, dir_val, out_val)

        if os.path.exists(source_file_path):
            dest_file_path = os.path.join(temp_root, dir_val, out_val)

            copy_needed = False
            source_size = os.path.getsize(source_file_path)

            if os.path.exists(dest_file_path):
                dest_size = os.path.getsize(dest_file_path)
                if source_size == dest_size:
                    print(f"  -> ‚è© –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç (–ø—Ä–æ–ø—É—Å–∫).")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1000**3 –¥–ª—è GB
                    source_size_gb = source_size / (1000 ** 3)
                    dest_size_gb = dest_size / (1000 ** 3)
                    print(
                        f"  -> ‚ö†Ô∏è  –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ò—Å—Ö–æ–¥–Ω—ã–π: {source_size_gb:.2f} GB, —Ü–µ–ª–µ–≤–æ–π: {dest_size_gb:.2f} GB. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å...")
                    copy_needed = True
            else:
                copy_needed = True

            if copy_needed:
                dest_dir = os.path.dirname(dest_file_path)

                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ---
                path_to_create = os.path.relpath(dest_dir, temp_root)
                current_path = temp_root
                all_dirs_created = True

                for part in path_to_create.split(os.path.sep):
                    current_path = os.path.join(current_path, part)
                    if not os.path.exists(current_path):
                        try:
                            os.mkdir(current_path)
                        except Exception as e:
                            print(f"  -> ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {current_path}")
                            print(
                                f"  -> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{os.path.dirname(current_path)}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
                            print(f"  -> –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                            all_dirs_created = False
                            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

                if not all_dirs_created:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1000**3 –¥–ª—è GB
                file_size_gb = source_size / (1000 ** 3)

                print(f"  -> ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: '{os.path.abspath(source_file_path)}' ({file_size_gb:.2f} GB)")
                print(f"  -> üì• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤: '{os.path.abspath(dest_file_path)}'")

                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å progress bar
                chunk_size = 10 * 1024 * 1024  # 10MB
                try:
                    with open(source_file_path, 'rb') as fsrc, \
                            open(dest_file_path, 'wb') as fdst, \
                            tqdm(total=source_size, unit='B', unit_scale=True,
                                 desc=os.path.basename(dest_file_path)) as pbar:
                        while True:
                            chunk = fsrc.read(chunk_size)
                            if not chunk:
                                break
                            fdst.write(chunk)
                            pbar.update(len(chunk))

                    # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                    shutil.copystat(source_file_path, dest_file_path)
                    copied_files_count += 1
                except Exception as e:
                    print(f"  -> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

        else:
            print(f"  -> üí® –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–ø—É—Å–∫): '{os.path.abspath(source_file_path)}'")
        print("-" * 25)

    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {checked_files_count}, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {copied_files_count}")
    print("-" * 50 + "\n")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if not os.path.isdir(PERMANENT_DIR):
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {PERMANENT_DIR}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PERMANENT_DIR –≤ —Å–∫—Ä–∏–ø—Ç–µ.")
        return

    if not os.path.isdir(TEMP_DIR):
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {TEMP_DIR}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TEMP_DIR –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.")
        return

    parser = argparse.ArgumentParser(
        description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ hf.txt –∏ civitay.txt –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    parser.add_argument("subdirectory", nargs='?', default="clarity-upscale",
                        help="–ò–º—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ 'templates/models' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
    args = parser.parse_args()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
    target_dir = os.path.join(BASE_TEMPLATE_DIR, args.subdirectory)

    if not os.path.isdir(target_dir):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {target_dir}")
        return

    print(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {target_dir}\n")

    # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    config_filenames_to_process = ["hf.txt", "civitay.txt"]

    processed_any_file = False
    for filename in config_filenames_to_process:
        config_path = os.path.join(target_dir, filename)
        if os.path.exists(config_path):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_path = os.path.join(args.subdirectory, filename)
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            process_model_configs(config_path, PERMANENT_DIR, TEMP_DIR, display_path)
            processed_any_file = True

    if not processed_any_file:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (hf.txt, civitay.txt) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")


if __name__ == "__main__":
    main()
